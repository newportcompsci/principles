{"componentChunkName":"component---src-templates-lesson-template-js","path":"/unit-1/lesson-12","webpackCompilationHash":"16d82d77b5e0fdbb69a8","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/unit-1/lesson-12\",\n  \"start\": \"2019-09-24T00:00:00.000Z\",\n  \"end\": \"2019-09-24T00:00:00.000Z\",\n  \"title\": \"Optional Lesson - Minimum Spanning Tree\",\n  \"slides\": true,\n  \"attachments\": [\"./ActivityGuide.pdf\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Minimum Spanning Tree\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://code.org/curriculum/docs/csp/U2L06-graph-1.png\",\n    \"alt\": \"Graph\"\n  }))), mdx(\"p\", null, \"Our goal with this is to determine what the 'cheapest' connections we can build to ensure that every node is\\nconnected to every other node. \"), mdx(\"p\", null, \"There are two very famous algorithms (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Robert_C._Prim\"\n  }), \"Prim's Algorithm\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Joseph_Kruskal\"\n  }), \"Kruskal's Algorithm\"), \") that can be used to determine\\nthe optimal solution. \"), mdx(\"p\", null, \"To watch each of these algorithms in action go to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://visualgo.net/en/mst\"\n  }), \"Visualgo Website\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/unit-1/lesson-12","start":"September 24, 2019","title":"Optional Lesson - Minimum Spanning Tree","attachments":[{"publicURL":"/principles/static/ActivityGuide-9302bb12a8468423520f93cebde26e99.pdf","name":"ActivityGuide"}],"slides":true}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}