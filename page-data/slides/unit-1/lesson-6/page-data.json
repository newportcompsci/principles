{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/slides/unit-1/lesson-6","matchPath":"/slides/unit-1/lesson-6/*","webpackCompilationHash":"66214c51ff4be8d19262","result":{"data":{"deck":{"id":"9a2206d4-5b63-5aa2-9e6c-99068e4c0452","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Sending Binary Numbers\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Code.org Internet Simulator\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.org\"\n  }), \"Code.org\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Challenge\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Groups must develop a protocol or set of rules for communicating a drawing to their partners using only bits.\")), mdx(\"p\", null, \"Rules: \"), mdx(\"div\", {\n    style: {\n      display: 'flex'\n    }\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The image will be a line drawing created by connecting points on a grid, like the one seen here.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The parties can discuss and agree on a protocol ahead of time, but the image exchange must happen without communication between the two parties, other than through using the Internet Simulator.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can only send a single message through the Internet Simulator to describe the whole image.\")), mdx(\"img\", {\n    style: {\n      height: '500px'\n    },\n    src: \"https://dr282zn36sxxg.cloudfront.net/datastreams/f-d%3Ab9748b3414be53ab97f6b929826d2352fad2add45213a3a5d246c01b%2BIMAGE%2BIMAGE.1\"\n  })), mdx(\"hr\", null), mdx(\"h2\", null, \"Wrap-Up\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Develop a protocol that allows the user to send a calendar date (mm/dd). What is the minimum number of bits necessary?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Develop a protocol that allows the user to send a time (use 24hr military time hh:mm:ss). What is the minimum number of bits necessary?\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/slides/unit-1/lesson-6/*","isCreatedByStatefulCreatePages":false,"id":"9a2206d4-5b63-5aa2-9e6c-99068e4c0452","slug":"/principles/slides/unit-1/lesson-6","title":"Sending Binary Numbers"}}}